{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport parse from \"html-react-parser\";\n\nconst serverLocation = require(\"../../config/keys.js\").server;\n\nvar data = [];\nvar sliced = [];\nvar parsed;\n\nclass TrafficForecast extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      datag: [],\n      title: []\n    });\n  }\n\n  componentDidMount() {\n    axios.get(`${serverLocation}/api/content/traffic-forecast`).then(res => {\n      this.setState({\n        datag: res.data.items.slice(0, 3)\n      }, () => console.log(\"Updated state\"));\n      this.setState({\n        title: res.data\n      }, () => console.log(\"Updated state\"));\n\n      for (var key in this.state) {\n        data.push(this.state[key]);\n      }\n    });\n  }\n\n  render() {\n    let numbers;\n    console.log(this.state.datag[0]);\n\n    if (this.state.datag[0]) {\n      numbers = this.state.datag[0].map(item => {\n        console.log(\"Iterating through for item \" + item.title);\n        parsed = parse(\"\" + item.description + \"\");\n        return __jsx(\"div\", {\n          className: \"ContentStyle\"\n        }, __jsx(\"div\", {\n          className: \"contentHeader\"\n        }, __jsx(\"h5\", null, __jsx(\"b\", null, item.title)), __jsx(\"p\", {\n          className: \"date\"\n        }, new Date(item.datePublished).toDateString())), __jsx(\"hr\", null), __jsx(\"p\", {\n          className: \"cardContent\"\n        }, parsed));\n      });\n    }\n\n    return __jsx(\"div\", {\n      className: \"containerEvents\"\n    }, __jsx(\"div\", {\n      className: \"col-xs-8\"\n    }, __jsx(\"h4\", null, this.state.title.title), numbers));\n  }\n\n}\n\nexport default TrafficForecast;","map":{"version":3,"sources":["/Users/pinagornik/Documents/faks/praktikumSSV/client/react-SSR-app/pages/components/rss/TrafficForecast.js"],"names":["React","axios","parse","serverLocation","require","server","data","sliced","parsed","TrafficForecast","Component","datag","title","componentDidMount","get","then","res","setState","items","slice","console","log","key","state","push","render","numbers","map","item","description","Date","datePublished","toDateString"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;AAEA,MAAMC,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCC,MAAvD;;AAEA,IAAIC,IAAI,GAAG,EAAX;AACA,IAAIC,MAAM,GAAG,EAAb;AACA,IAAIC,MAAJ;;AAEA,MAAMC,eAAN,SAA8BT,KAAK,CAACU,SAApC,CAA8C;AAAA;AAAA;;AAAA,mCACrC;AACPC,MAAAA,KAAK,EAAE,EADA;AAEPC,MAAAA,KAAK,EAAE;AAFA,KADqC;AAAA;;AAM7CC,EAAAA,iBAAiB,GAAG;AACnBZ,IAAAA,KAAK,CAACa,GAAN,CAAW,GAAEX,cAAe,+BAA5B,EAA4DY,IAA5D,CAAkEC,GAAD,IAAS;AACzE,WAAKC,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAAEK,GAAG,CAACV,IAAJ,CAASY,KAAT,CAAeC,KAAf,CAAqB,CAArB,EAAwB,CAAxB;AAAT,OAAd,EAAqD,MACpDC,OAAO,CAACC,GAAR,CAAY,eAAZ,CADD;AAGA,WAAKJ,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAEI,GAAG,CAACV;AAAb,OAAd,EAAmC,MAAMc,OAAO,CAACC,GAAR,CAAY,eAAZ,CAAzC;;AAEA,WAAK,IAAIC,GAAT,IAAgB,KAAKC,KAArB,EAA4B;AAC3BjB,QAAAA,IAAI,CAACkB,IAAL,CAAU,KAAKD,KAAL,CAAWD,GAAX,CAAV;AACA;AACD,KATD;AAUA;;AAEDG,EAAAA,MAAM,GAAG;AACR,QAAIC,OAAJ;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,KAAL,CAAWZ,KAAX,CAAiB,CAAjB,CAAZ;;AACA,QAAI,KAAKY,KAAL,CAAWZ,KAAX,CAAiB,CAAjB,CAAJ,EAAyB;AACxBe,MAAAA,OAAO,GAAG,KAAKH,KAAL,CAAWZ,KAAX,CAAiB,CAAjB,EAAoBgB,GAApB,CAAyBC,IAAD,IAAU;AAC3CR,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCO,IAAI,CAAChB,KAAjD;AACAJ,QAAAA,MAAM,GAAGN,KAAK,CAAC,KAAK0B,IAAI,CAACC,WAAV,GAAwB,EAAzB,CAAd;AACA,eACC;AAAK,UAAA,SAAS,EAAC;AAAf,WACC;AAAK,UAAA,SAAS,EAAC;AAAf,WACC,kBACC,iBAAID,IAAI,CAAChB,KAAT,CADD,CADD,EAIC;AAAG,UAAA,SAAS,EAAC;AAAb,WACE,IAAIkB,IAAJ,CAASF,IAAI,CAACG,aAAd,EAA6BC,YAA7B,EADF,CAJD,CADD,EASC,iBATD,EAWC;AAAG,UAAA,SAAS,EAAC;AAAb,WAA4BxB,MAA5B,CAXD,CADD;AAeA,OAlBS,CAAV;AAmBA;;AACD,WACC;AAAK,MAAA,SAAS,EAAC;AAAf,OACC;AAAK,MAAA,SAAS,EAAC;AAAf,OACC,kBAAK,KAAKe,KAAL,CAAWX,KAAX,CAAiBA,KAAtB,CADD,EAEEc,OAFF,CADD,CADD;AAQA;;AAnD4C;;AAqD9C,eAAejB,eAAf","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport parse from \"html-react-parser\";\n\nconst serverLocation = require(\"../../config/keys.js\").server;\n\nvar data = [];\nvar sliced = [];\nvar parsed;\n\nclass TrafficForecast extends React.Component {\n\tstate = {\n\t\tdatag: [],\n\t\ttitle: [],\n\t};\n\n\tcomponentDidMount() {\n\t\taxios.get(`${serverLocation}/api/content/traffic-forecast`).then((res) => {\n\t\t\tthis.setState({ datag: res.data.items.slice(0, 3) }, () =>\n\t\t\t\tconsole.log(\"Updated state\")\n\t\t\t);\n\t\t\tthis.setState({ title: res.data }, () => console.log(\"Updated state\"));\n\n\t\t\tfor (var key in this.state) {\n\t\t\t\tdata.push(this.state[key]);\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n\t\tlet numbers;\n\t\tconsole.log(this.state.datag[0]);\n\t\tif (this.state.datag[0]) {\n\t\t\tnumbers = this.state.datag[0].map((item) => {\n\t\t\t\tconsole.log(\"Iterating through for item \" + item.title);\n\t\t\t\tparsed = parse(\"\" + item.description + \"\");\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"ContentStyle\">\n\t\t\t\t\t\t<div className=\"contentHeader\">\n\t\t\t\t\t\t\t<h5>\n\t\t\t\t\t\t\t\t<b>{item.title}</b>\n\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t<p className=\"date\">\n\t\t\t\t\t\t\t\t{new Date(item.datePublished).toDateString()}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\n\t\t\t\t\t\t<p className=\"cardContent\">{parsed}</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"containerEvents\">\n\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t<h4>{this.state.title.title}</h4>\n\t\t\t\t\t{numbers}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default TrafficForecast;\n"]},"metadata":{},"sourceType":"module"}