{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport myData from '../../src/data/results_json';\nimport request from 'request';\nimport \"leaflet.awesome-markers/dist/leaflet.awesome-markers.css\";\nimport \"leaflet.awesome-markers/dist/leaflet.awesome-markers\";\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nlet weather = {\n  Clear: 'J',\n  Rain: 'D',\n  Clouds: 'O',\n  Snow: 'S',\n  Fog: 'M'\n};\nvar marker = {\n  coords: [46.1491664, 14.9860106],\n  locText: \"test\",\n  iconColor: \"\",\n  criticalState: 0\n};\n\nclass StreetMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"changeFilterOptions\", (filter, surface) => {\n      this.state.markers = [];\n      this.setState({\n        filterOptions: filter\n      });\n      this.state.surface = surface;\n    });\n\n    _defineProperty(this, \"getLocation\", () => {\n      if (navigator.geolocation) {\n        let position = navigator.geolocation.getCurrentPosition(this.geoSuccess);\n      } else {\n        alert(\"Not supported\");\n      }\n    });\n\n    _defineProperty(this, \"geoSuccess\", position => {\n      var lat = position.coords.latitude;\n      var lng = position.coords.longitude;\n      this.setState({\n        currentLoc: {\n          lat: lat,\n          long: lng\n        }\n      });\n    });\n\n    _defineProperty(this, \"getWeatherData\", (lat, lon) => {\n      fetch('http://api.openweathermap.org/data/2.5/find?lat=' + lat + '&lon=' + lon + '&cnt=1&APPID=19117506641d90371c01ce010e35f032').then(res => res.json()).then(json => this.setState({\n        weatherD: json.list[0].weather[0].main\n      }));\n      /* let url = 'http://api.openweathermap.org/data/2.5/find?lat='+lat+'&lon='+lon+'&cnt=1&APPID=19117506641d90371c01ce010e35f032';\r\n       request({url,json:true},(error,{body})=>{\r\n           let d = body.list[0].weather[0].main;\r\n           this.setState({weatherD: d})\r\n       }) */\n    });\n\n    _defineProperty(this, \"getCurrentState\", () => {\n      let date = new Date();\n      let day = date.getDay() !== 0 ? date.getDay() + 1 : 6;\n      let month = date.getMonth() !== 12 ? date.getMonth() + 1 : 0; //assign surface at current time\n\n      let surface = \"\";\n\n      switch (weather[this.state.weatherD]) {\n        case \"D\":\n          surface = {\n            general: 'ne_suho',\n            type: \"MO\"\n          };\n          break;\n\n        case \"S\":\n          surface = {\n            general: 'ne_suho',\n            type: \"SL\"\n          };\n          break;\n\n        default:\n          surface = {\n            general: 'suho',\n            type: \"SU\"\n          };\n          break;\n      }\n\n      let current = {\n        PRVR_Vreme: weather[this.state.weatherD],\n        Cas_Nesrece: date.getHours().toString() + '.0',\n        dan_v_tednu: day.toString(),\n        mesec: month.toString(),\n        PRPV_Povrsje: surface\n      };\n      return current;\n    });\n\n    _defineProperty(this, \"isSectionCritical\", (section, surfaceType) => {\n      let state = Object.keys(this.state.filterOptions).length !== 0 ? this.state.filterOptions : this.getCurrentState();\n      let count = 0;\n\n      if (myData[section][\"dan_teden\"].includes(parseInt(state['dan_v_tednu']))) {\n        count++;\n      }\n\n      let section_attributes = myData[section]['povrsje'][state['PRPV_Povrsje']['general']];\n\n      for (let attribute in state) {\n        if (attribute === 'PRPV_Povrsje') {\n          if (section_attributes[attribute].includes(state[attribute]['type']) && attribute !== 'dan_v_tednu') count++;\n        } else {\n          if (section_attributes[attribute].includes(state[attribute]) && attribute !== 'dan_v_tednu') count++;\n        }\n      }\n\n      return count;\n    });\n\n    _defineProperty(this, \"setMarkerColor\", criticalState => {\n      let url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png';\n\n      switch (criticalState) {\n        case 5:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png';\n\n        case 4:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png';\n          break;\n\n        case 3:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png';\n          break;\n\n        case 2:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png';\n          break;\n\n        case 1:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png';\n          break;\n      }\n\n      return url;\n    });\n\n    _defineProperty(this, \"setMarkersBasedOnLegend\", (criticalState, marker) => {\n      let isLegendEmpty = !Object.values(this.state.criticalLevelsChecked).includes(true);\n      let legendKeys = Object.keys(this.state.criticalLevelsChecked);\n      marker.iconColor = this.setMarkerColor(criticalState);\n\n      if (criticalState >= 1) {\n        if (isLegendEmpty) this.state.markers.push(marker);else {\n          for (let i = 0; i < legendKeys.length; i++) {\n            if (this.state.criticalLevelsChecked[legendKeys[i]] && criticalState.toString() === legendKeys[i]) this.state.markers.push(marker);\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"addMarkers\", () => {\n      for (let section in myData) {\n        if (!myData[section].koordinate.includes(null)) {\n          let coord = myData[section].koordinate.toString().split(',');\n          marker = {\n            coords: [coord[0], coord[1]],\n            locText: myData[section].kraj[0][3].toString(),\n            iconColor: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png'\n          };\n\n          if (this.state.selectedOption === 'all') {\n            if (Object.keys(this.state.filterOptions).length === 0) this.state.markers.push(marker);else this.setMarkersBasedOnLegend(this.isSectionCritical(section, this.state.surface), marker);\n          } else {\n            let criticalState = this.isSectionCritical(section, this.state.selectedOption);\n            this.setMarkersBasedOnLegend(criticalState, marker);\n          }\n        }\n      }\n    });\n\n    this.state = {\n      lat: 46.1491664,\n      lng: 14.9860106,\n      zoom: 9,\n      selectedOption: \"current\",\n      criticalLevelsChecked: {\n        '4': false,\n        '3': false,\n        '2': false\n      },\n      filterOptions: {},\n      markers: [],\n      surface: '',\n      weatherD: '',\n      currentLoc: {\n        lat: 46.1491664,\n        lng: 14.9860106\n      }\n    };\n  }\n\n  changeOption(newOption) {\n    this.setState({\n      markers: []\n    });\n    this.setState({\n      filterOptions: {}\n    });\n    this.setState({\n      selectedOption: newOption.value\n    });\n  }\n\n  changeCriticalLevel(newLevel) {\n    this.state.markers = [];\n    this.setState({\n      criticalLevelsChecked: newLevel\n    });\n  }\n\n  componentDidMount() {\n    this.getWeatherData(this.state.currentLoc.lat, this.state.currentLoc.lng);\n  }\n\n  render() {\n    this.getLocation();\n    this.addMarkers();\n    const position = [this.state.lat, this.state.lng];\n    return __jsx(Map, {\n      className: \"map\",\n      center: position,\n      zoom: this.state.zoom\n    }, __jsx(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }), this.state.markers.map((m, idx) => __jsx(Marker, {\n      key: `marker-${idx}`,\n      position: m.coords,\n      icon: L.icon({\n        iconUrl: m.iconColor,\n        iconSize: [30, 50],\n        iconAnchor: [22, 50],\n        shadowAnchor: [4, 62],\n        // the same for the shadow\n        popupAnchor: [-6, -35]\n      })\n    }, __jsx(Popup, null, __jsx(\"span\", null, m.locText)))));\n  }\n\n}\n\nexport default StreetMap;","map":{"version":3,"sources":["D:/Projects/Webpages/BoomMap/client/react-SSR-app/pages/components/Map.js"],"names":["React","L","myData","request","Map","TileLayer","Marker","Popup","weather","Clear","Rain","Clouds","Snow","Fog","marker","coords","locText","iconColor","criticalState","StreetMap","Component","constructor","props","filter","surface","state","markers","setState","filterOptions","navigator","geolocation","position","getCurrentPosition","geoSuccess","alert","lat","latitude","lng","longitude","currentLoc","long","lon","fetch","then","res","json","weatherD","list","main","date","Date","day","getDay","month","getMonth","general","type","current","PRVR_Vreme","Cas_Nesrece","getHours","toString","dan_v_tednu","mesec","PRPV_Povrsje","section","surfaceType","Object","keys","length","getCurrentState","count","includes","parseInt","section_attributes","attribute","url","isLegendEmpty","values","criticalLevelsChecked","legendKeys","setMarkerColor","push","i","koordinate","coord","split","kraj","selectedOption","setMarkersBasedOnLegend","isSectionCritical","zoom","changeOption","newOption","value","changeCriticalLevel","newLevel","componentDidMount","getWeatherData","render","getLocation","addMarkers","map","m","idx","icon","iconUrl","iconSize","iconAnchor","shadowAnchor","popupAnchor"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport myData from '../../src/data/results_json'\r\nimport request from 'request'\r\nimport \"leaflet.awesome-markers/dist/leaflet.awesome-markers.css\"\r\nimport \"leaflet.awesome-markers/dist/leaflet.awesome-markers\"\r\n\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\nlet weather = {\r\n    Clear: 'J',\r\n    Rain: 'D',\r\n    Clouds: 'O',\r\n    Snow: 'S',\r\n    Fog: 'M'\r\n};\r\n\r\nvar marker = {\r\n    coords: [46.1491664,14.9860106],\r\n    locText: \"test\",\r\n    iconColor: \"\",\r\n    criticalState :0\r\n};\r\nclass StreetMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lat: 46.1491664 ,\r\n            lng: 14.9860106,\r\n            zoom: 9,\r\n            selectedOption:\"current\",\r\n            criticalLevelsChecked: {'4': false, '3': false, '2': false},\r\n            filterOptions: {},\r\n            markers: [],\r\n            surface: '',\r\n            weatherD: '',\r\n            currentLoc: {lat: 46.1491664, lng: 14.9860106}\r\n        }\r\n    }\r\n    changeOption(newOption){\r\n        this.setState({markers: []})\r\n        this.setState({filterOptions: {}})\r\n        this.setState({ selectedOption: newOption.value })\r\n\r\n    }\r\n    changeCriticalLevel(newLevel){\r\n        this.state.markers = [];\r\n        this.setState({ criticalLevelsChecked: newLevel })\r\n\r\n    }\r\n    changeFilterOptions=(filter,surface)=>{\r\n        this.state.markers = []\r\n        this.setState({filterOptions: filter})\r\n        this.state.surface = surface\r\n    }\r\n\r\n     componentDidMount() {\r\n        this.getWeatherData(this.state.currentLoc.lat, this.state.currentLoc.lng);\r\n    }\r\n    getLocation = () => {\r\n        if (navigator.geolocation) {\r\n           let position = navigator.geolocation.getCurrentPosition(this.geoSuccess);\r\n\r\n        } else {\r\n           alert(\"Not supported\")\r\n        }\r\n    }\r\n    geoSuccess =(position) => {\r\n        var lat = position.coords.latitude;\r\n        var lng = position.coords.longitude;\r\n        this.setState({currentLoc: {lat: lat, long: lng}});\r\n    }\r\n\r\n    getWeatherData = (lat,lon) => {\r\n        fetch('http://api.openweathermap.org/data/2.5/find?lat='+lat+'&lon='+lon+'&cnt=1&APPID=19117506641d90371c01ce010e35f032')\r\n            .then(res => res.json())\r\n            .then(json => this.setState({ weatherD: json.list[0].weather[0].main }));\r\n       /* let url = 'http://api.openweathermap.org/data/2.5/find?lat='+lat+'&lon='+lon+'&cnt=1&APPID=19117506641d90371c01ce010e35f032';\r\n        request({url,json:true},(error,{body})=>{\r\n            let d = body.list[0].weather[0].main;\r\n            this.setState({weatherD: d})\r\n        }) */\r\n    };\r\n    getCurrentState = ()=>{\r\n        let date = new Date();\r\n        let day = date.getDay()!==0 ? date.getDay()+1 : 6;\r\n        let month = date.getMonth()!==12 ? date.getMonth()+1: 0;\r\n\r\n        //assign surface at current time\r\n        let surface = \"\"\r\n        switch (weather[this.state.weatherD]) {\r\n            case \"D\": surface = {general: 'ne_suho', type: \"MO\"};  break;\r\n            case \"S\": surface = {general: 'ne_suho', type: \"SL\"}; break;\r\n            default: surface = {general: 'suho', type : \"SU\"}; break;\r\n        }\r\n        let current = {\r\n            PRVR_Vreme: weather[this.state.weatherD],\r\n            Cas_Nesrece: date.getHours().toString()+'.0',\r\n            dan_v_tednu: day.toString(),\r\n            mesec: month.toString(),\r\n            PRPV_Povrsje: surface\r\n        };\r\n\r\n\r\n        return current\r\n    };\r\n    isSectionCritical = (section,surfaceType)=>{\r\n        let state = Object.keys(this.state.filterOptions).length !== 0 ? this.state.filterOptions : this.getCurrentState()\r\n        let count = 0;\r\n        if(myData[section][\"dan_teden\"].includes(parseInt(state['dan_v_tednu']))) {\r\n            count++;\r\n        }\r\n        let section_attributes = myData[section]['povrsje'][state['PRPV_Povrsje']['general']];\r\n        for(let attribute in state){\r\n            if(attribute === 'PRPV_Povrsje'){\r\n                if(section_attributes[attribute].includes(state[attribute]['type'])&& attribute!=='dan_v_tednu')\r\n                    count++;\r\n            }\r\n            else {\r\n                if(section_attributes[attribute].includes(state[attribute])&& attribute!=='dan_v_tednu')\r\n                    count++;\r\n            }\r\n\r\n        }\r\n        return count\r\n\r\n    };\r\n    setMarkerColor = (criticalState)=> {\r\n        let url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png';\r\n            switch (criticalState) {\r\n            case 5: url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'\r\n            case 4: url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png';     break;\r\n            case 3: url= 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png';   break;\r\n            case 2: url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png';   break;\r\n            case 1: url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png';   break;\r\n            }\r\n        return url;\r\n    };\r\n    setMarkersBasedOnLegend= (criticalState,marker) => {\r\n        let isLegendEmpty = (!Object.values(this.state.criticalLevelsChecked).includes(true))\r\n        let legendKeys = Object.keys(this.state.criticalLevelsChecked);\r\n        marker.iconColor = this.setMarkerColor(criticalState);\r\n        if(criticalState>=1) {\r\n            if (isLegendEmpty)\r\n                this.state.markers.push(marker)\r\n            else {\r\n                for (let i = 0; i < legendKeys.length; i++) {\r\n                    if (this.state.criticalLevelsChecked[legendKeys[i]] && (criticalState.toString() === legendKeys[i]))\r\n                        this.state.markers.push(marker)\r\n                }\r\n            }\r\n        }\r\n    };\r\n    addMarkers = () => {\r\n        for(let section in myData) {\r\n            if (!myData[section].koordinate.includes(null)) {\r\n                let coord = myData[section].koordinate.toString().split(',');\r\n                marker = {coords: [coord[0], coord[1]],locText: myData[section].kraj[0][3].toString(),iconColor: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png' };\r\n                if (this.state.selectedOption === 'all') {\r\n                    if(Object.keys(this.state.filterOptions).length === 0)\r\n                        this.state.markers.push(marker)\r\n                    else this.setMarkersBasedOnLegend(this.isSectionCritical(section, this.state.surface),marker)\r\n                }\r\n                else {\r\n                    let criticalState = this.isSectionCritical(section, this.state.selectedOption);\r\n                    this.setMarkersBasedOnLegend(criticalState,marker)\r\n                }\r\n            }\r\n        }\r\n    };\r\n    render() {\r\n        this.getLocation();\r\n\r\n        this.addMarkers();\r\n\r\n        const position = [this.state.lat, this.state.lng];\r\n        return (\r\n            <Map className=\"map\" center={position} zoom={this.state.zoom}>\r\n                <TileLayer\r\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {this.state.markers.map((m, idx) =>\r\n                    <Marker\r\n                        key={`marker-${idx}`}\r\n                        position={m.coords}\r\n                        icon={L.icon({\r\n                            iconUrl: m.iconColor,\r\n                            iconSize: [30, 50],\r\n                            iconAnchor:   [22, 50],\r\n                            shadowAnchor: [4, 62],  // the same for the shadow\r\n                            popupAnchor:  [-6, -35],\r\n                        })}>\r\n                    <Popup>\r\n                        <span>{m.locText}</span>\r\n                    </Popup>\r\n                </Marker>\r\n                )}\r\n            </Map>\r\n        );\r\n    }\r\n}\r\nexport default StreetMap"]},"metadata":{},"sourceType":"module"}