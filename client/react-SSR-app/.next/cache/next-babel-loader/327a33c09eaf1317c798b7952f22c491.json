{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport Button from '@material-ui/core/Button';\nimport { Container, Row, Col } from 'reactstrap';\nimport TimePicker from 'rc-time-picker';\nimport 'rc-time-picker/assets/index.css';\nconst day_options = [{\n  value: '0',\n  label: 'Ponedeljek'\n}, {\n  value: '1',\n  label: 'Torek'\n}, {\n  value: '2',\n  label: 'Sreda'\n}, {\n  value: '3',\n  label: 'Četrtek'\n}, {\n  value: '4',\n  label: 'Petek'\n}, {\n  value: '5',\n  label: 'Sobota'\n}, {\n  value: '6',\n  label: 'Nedelja'\n}];\nconst weather_options = [{\n  value: 'J',\n  label: 'Jasno'\n}, {\n  value: 'D',\n  label: 'Deževno'\n}, {\n  value: 'O',\n  label: 'Oblačno'\n}, {\n  value: 'S',\n  label: 'Sneg'\n}, {\n  value: 'V',\n  label: 'Veter'\n}, {\n  value: 'M',\n  label: 'Megla'\n}];\nconst month_options = [{\n  value: '1',\n  label: 'Januar'\n}, {\n  value: '2',\n  label: 'Februar'\n}, {\n  value: '3',\n  label: 'Marec'\n}, {\n  value: '4',\n  label: 'April'\n}, {\n  value: '5',\n  label: 'Maj'\n}, {\n  value: '6',\n  label: 'Junij'\n}, {\n  value: '7',\n  label: 'Julij'\n}, {\n  value: '8',\n  label: 'Avgust'\n}, {\n  value: '9',\n  label: 'September'\n}, {\n  value: '10',\n  label: 'Oktober'\n}, {\n  value: '11',\n  label: 'November'\n}, {\n  value: '12',\n  label: 'December'\n}];\nconst surface_options = [{\n  value: 'suho',\n  label: 'Suho'\n}, {\n  value: 'M',\n  label: 'Mokro'\n}, {\n  value: 'SL',\n  label: 'Sneženo'\n}];\nexport default class CustomFilter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"changeVisibility\", visibility => {\n      this.setState({\n        visible: visibility\n      });\n      console.log(visibility);\n    });\n\n    _defineProperty(this, \"handleDayChange\", selected => {\n      !selected ? this.setState({\n        selectedDay: -1\n      }) : this.setState({\n        selectedDay: selected.value\n      });\n    });\n\n    _defineProperty(this, \"handleMonthChange\", selected => {\n      !selected ? this.setState({\n        selectedMonth: -1\n      }) : this.setState({\n        selectedMonth: selected.value\n      });\n    });\n\n    _defineProperty(this, \"handleWeatherChange\", selected => {\n      !selected ? this.setState({\n        selectedWeather: -1\n      }) : this.setState({\n        selectedWeather: selected.value\n      });\n    });\n\n    this.state = {\n      selectedDay: '-1',\n      selectedMonth: '-1',\n      selectedTime: '-1',\n      selectedWeather: 'N',\n      surface: {\n        general: 'ne_suho',\n        type: 'SU'\n      },\n      visible: \"hidden\"\n    };\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleWeatherChange = this.handleWeatherChange.bind(this);\n    this.handleSurfaceChange = this.handleSurfaceChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.changeVisibility = this.changeVisibility.bind(this);\n  }\n\n  handleTimeChange(event) {\n    event ? this.setState({\n      selectedTime: event.format(\"HH\") + '.0'\n    }) : this.setState({\n      selectedTime: -1\n    });\n  }\n\n  handleSurfaceChange(selected) {\n    let surfaceChoice = \"\";\n\n    if (selected) {\n      if (selected.value !== 'suho') {\n        surfaceChoice = {\n          general: \"ne_suho\",\n          type: selected.value\n        };\n      } else {\n        surfaceChoice = {\n          general: \"suho\",\n          type: \"suho\"\n        };\n      }\n    }\n\n    !selected ? this.setState({\n      surface: 'ne_suho'\n    }) : this.setState({\n      surface: surfaceChoice\n    });\n  }\n\n  handleSubmit(event) {\n    let state = {\n      PRVR_Vreme: this.state.selectedWeather,\n      Cas_Nesrece: this.state.selectedTime,\n      dan_v_tednu: this.state.selectedDay,\n      mesec: this.state.selectedMonth,\n      PRPV_Povrsje: this.state.surface\n    };\n    this.props.change(state, this.state.surface);\n    event.preventDefault();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        visibility: this.state.visible\n      }\n    }, __jsx(\"form\", {\n      onSubmit: this.handleSubmit\n    }, __jsx(\"h6\", null, \" Po meri: \"), __jsx(\"hr\", null), __jsx(\"label\", {\n      className: \"custom\"\n    }), __jsx(Select, {\n      isClearable: true,\n      placeholder: \"Dan v tednu...\",\n      options: day_options,\n      onChange: this.handleDayChange\n    }), __jsx(\"br\", null), __jsx(Select, {\n      isClearable: true,\n      placeholder: \"Vreme...\",\n      options: weather_options,\n      onChange: this.handleWeatherChange\n    }), __jsx(\"br\", null), __jsx(Select, {\n      isClearable: true,\n      placeholder: \"Mesec...\",\n      options: month_options,\n      onChange: this.handleMonthChange\n    }), __jsx(\"br\", null), __jsx(Select, {\n      isClearable: true,\n      placeholder: \"Povr\\u0161je...\",\n      options: surface_options,\n      onChange: this.handleSurfaceChange\n    }), __jsx(\"br\", null), __jsx(TimePicker, {\n      placeholder: \"Čas...\",\n      showSecond: false,\n      onChange: this.handleTimeChange\n    }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(Row, null, __jsx(Col, null, __jsx(Button, {\n      variant: \"outlined\",\n      type: \"submit\"\n    }, \"Prika\\u017Ei \")))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}