{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, BarChart, LineChart } from 'recharts';\nimport axios from 'axios';\nvar data = [];\n\nconst serverLocation = require(\"../../../../src/config/keys\").server;\n\nexport default class NesreceVreme extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      datag: []\n    });\n  }\n\n  componentDidMount() {\n    axios.get(`${serverLocation}/api/graph/25`).then(res => {\n      this.setState({\n        datag: res.data\n      });\n\n      for (var key in this.state) {\n        data.push(this.state[key]);\n      }\n    });\n  }\n\n  render() {\n    return __jsx(AreaChart, {\n      width: 500,\n      height: 300,\n      data: this.state.datag.podatki,\n      margin: {\n        top: 10,\n        right: 30,\n        left: 0,\n        bottom: 0\n      }\n    }, __jsx(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }), __jsx(XAxis, {\n      dataKey: \"vreme\",\n      interval: 0,\n      fontSize: 10\n    }), __jsx(YAxis, null), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Area, {\n      type: \"monotone\",\n      dataKey: \"nesrece\",\n      stroke: \"#0091b0\",\n      fill: \"#0091b0\",\n      dot: {\n        fill: '#008080',\n        strokeWidth: 1\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/Projects/Webpages/BoomMap/client/react-SSR-app/pages/components/graphs/NesreceVreme.js"],"names":["React","PureComponent","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","Legend","BarChart","LineChart","axios","data","serverLocation","require","server","NesreceVreme","datag","componentDidMount","get","then","res","setState","key","state","push","render","podatki","top","right","left","bottom","fill","strokeWidth"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SACIC,SADJ,EACeC,IADf,EACqBC,KADrB,EAC4BC,KAD5B,EACmCC,aADnC,EACkDC,OADlD,EAC2DC,MAD3D,EACmEC,QADnE,EAC6EC,SAD7E,QAEO,UAFP;AAIA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,IAAIC,IAAI,GAAG,EAAX;;AAEA,MAAMC,cAAc,GAAGC,OAAO,CAAC,6BAAD,CAAP,CAAuCC,MAA9D;;AAEA,eAAe,MAAMC,YAAN,SAA2Bf,aAA3B,CAAyC;AAAA;AAAA;;AAAA,mCAE5C;AACJgB,MAAAA,KAAK,EAAE;AADH,KAF4C;AAAA;;AAMpDC,EAAAA,iBAAiB,GAAG;AAChBP,IAAAA,KAAK,CAACQ,GAAN,CAAW,GAAEN,cAAe,eAA5B,EAA4CO,IAA5C,CAAiDC,GAAG,IAAI;AACpD,WAAKC,QAAL,CAAc;AAACL,QAAAA,KAAK,EAAEI,GAAG,CAACT;AAAZ,OAAd;;AACA,WAAI,IAAIW,GAAR,IAAe,KAAKC,KAApB,EAA2B;AACvBZ,QAAAA,IAAI,CAACa,IAAL,CAAU,KAAKD,KAAL,CAAWD,GAAX,CAAV;AACH;AACJ,KALD;AAMH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,SAAD;AACI,MAAA,KAAK,EAAE,GADX;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWP,KAAX,CAAiBU,OAH3B;AAII,MAAA,MAAM,EAAE;AACJC,QAAAA,GAAG,EAAE,EADD;AACKC,QAAAA,KAAK,EAAE,EADZ;AACgBC,QAAAA,IAAI,EAAE,CADtB;AACyBC,QAAAA,MAAM,EAAE;AADjC;AAJZ,OAQI,MAAC,aAAD;AAAe,MAAA,eAAe,EAAC;AAA/B,MARJ,EASI,MAAC,KAAD;AAAO,MAAA,OAAO,EAAC,OAAf;AAAuB,MAAA,QAAQ,EAAE,CAAjC;AAAoC,MAAA,QAAQ,EAAE;AAA9C,MATJ,EAUI,MAAC,KAAD,OAVJ,EAWI,MAAC,OAAD,OAXJ,EAYI,MAAC,MAAD,OAZJ,EAaI,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,SAA9B;AAAwC,MAAA,MAAM,EAAC,SAA/C;AAAyD,MAAA,IAAI,EAAC,SAA9D;AAAwE,MAAA,GAAG,EAAE;AAAEC,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,WAAW,EAAE;AAAhC;AAA7E,MAbJ,CADJ;AAiBH;;AAjCmD","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport {\r\n    AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, BarChart, LineChart\r\n} from 'recharts';\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nvar data = [\r\n];\r\nconst serverLocation = require(\"../../../../src/config/keys\").server;\r\n\r\nexport default class NesreceVreme extends PureComponent {\r\n\r\n    state = {\r\n        datag: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(`${serverLocation}/api/graph/25`).then(res => {\r\n            this.setState({datag: res.data});\r\n            for(var key in this.state) {\r\n                data.push(this.state[key]);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AreaChart\r\n                width={500}\r\n                height={300}\r\n                data={this.state.datag.podatki}\r\n                margin={{\r\n                    top: 10, right: 30, left: 0, bottom: 0,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"vreme\" interval={0} fontSize={10}/>\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend/>\r\n                <Area type=\"monotone\" dataKey=\"nesrece\" stroke=\"#0091b0\" fill=\"#0091b0\" dot={{ fill: '#008080', strokeWidth: 1 }}/>\r\n            </AreaChart>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}