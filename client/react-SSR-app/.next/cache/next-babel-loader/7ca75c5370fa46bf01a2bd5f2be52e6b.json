{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport myData from '../../src/data/results_json';\nimport request from 'request';\nimport \"leaflet.awesome-markers/dist/leaflet.awesome-markers.css\";\nimport \"leaflet.awesome-markers/dist/leaflet.awesome-markers\";\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nvar weather = {\n  Clear: 'J',\n  Rain: 'D',\n  Clouds: 'O',\n  Snow: 'S',\n  Fog: 'M'\n};\nvar marker = {\n  coords: [46.1491664, 14.9860106],\n  locText: \"test\",\n  iconColor: \"\",\n  criticalState: 0\n};\n\nvar StreetMap = /*#__PURE__*/function (_React$Component) {\n  _inherits(StreetMap, _React$Component);\n\n  var _super = _createSuper(StreetMap);\n\n  function StreetMap(props) {\n    var _this;\n\n    _classCallCheck(this, StreetMap);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"changeFilterOptions\", function (filter, surface) {\n      _this.state.markers = [];\n\n      _this.setState({\n        filterOptions: filter\n      });\n\n      _this.state.surface = surface;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getLocation\", function () {\n      if (navigator.geolocation) {\n        var position = navigator.geolocation.getCurrentPosition(_this.geoSuccess);\n      } else {\n        alert(\"Not supported\");\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"geoSuccess\", function (position) {\n      var lat = position.coords.latitude;\n      var lng = position.coords.longitude;\n\n      _this.setState({\n        currentLoc: {\n          lat: lat,\n          long: lng\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getWeatherData\", function (lat, lon) {\n      fetch('http://api.openweathermap.org/data/2.5/find?lat=' + lat + '&lon=' + lon + '&cnt=1&APPID=19117506641d90371c01ce010e35f032').then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        return _this.setState({\n          weatherD: json.list[0].weather[0].main\n        });\n      });\n      /* let url = 'http://api.openweathermap.org/data/2.5/find?lat='+lat+'&lon='+lon+'&cnt=1&APPID=19117506641d90371c01ce010e35f032';\n       request({url,json:true},(error,{body})=>{\n           let d = body.list[0].weather[0].main;\n           this.setState({weatherD: d})\n       }) */\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCurrentState\", function () {\n      var date = new Date();\n      var day = date.getDay() !== 0 ? date.getDay() + 1 : 6;\n      var month = date.getMonth() !== 12 ? date.getMonth() + 1 : 0; //assign surface at current time\n\n      var surface = \"\";\n\n      switch (weather[_this.state.weatherD]) {\n        case \"D\":\n          surface = {\n            general: 'ne_suho',\n            type: \"MO\"\n          };\n          break;\n\n        case \"S\":\n          surface = {\n            general: 'ne_suho',\n            type: \"SL\"\n          };\n          break;\n\n        default:\n          surface = {\n            general: 'suho',\n            type: \"SU\"\n          };\n          break;\n      }\n\n      var current = {\n        PRVR_Vreme: weather[_this.state.weatherD],\n        Cas_Nesrece: date.getHours().toString() + '.0',\n        dan_v_tednu: day.toString(),\n        mesec: month.toString(),\n        PRPV_Povrsje: surface\n      };\n      return current;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSectionCritical\", function (section, surfaceType) {\n      var state = Object.keys(_this.state.filterOptions).length !== 0 ? _this.state.filterOptions : _this.getCurrentState();\n      var count = 0;\n\n      if (myData[section][\"dan_teden\"].includes(parseInt(state['dan_v_tednu']))) {\n        count++;\n      }\n\n      var section_attributes = myData[section]['povrsje'][state['PRPV_Povrsje']['general']];\n\n      for (var attribute in state) {\n        if (attribute === 'PRPV_Povrsje') {\n          if (section_attributes[attribute].includes(state[attribute]['type']) && attribute !== 'dan_v_tednu') count++;\n        } else {\n          if (section_attributes[attribute].includes(state[attribute]) && attribute !== 'dan_v_tednu') count++;\n        }\n      }\n\n      return count;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setMarkerColor\", function (criticalState) {\n      var url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png';\n\n      switch (criticalState) {\n        case 5:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png';\n\n        case 4:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png';\n          break;\n\n        case 3:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png';\n          break;\n\n        case 2:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png';\n          break;\n\n        case 1:\n          url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png';\n          break;\n      }\n\n      return url;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setMarkersBasedOnLegend\", function (criticalState, marker) {\n      var isLegendEmpty = !Object.values(_this.state.criticalLevelsChecked).includes(true);\n      var legendKeys = Object.keys(_this.state.criticalLevelsChecked);\n      marker.iconColor = _this.setMarkerColor(criticalState);\n\n      if (criticalState >= 1) {\n        if (isLegendEmpty) _this.state.markers.push(marker);else {\n          for (var i = 0; i < legendKeys.length; i++) {\n            if (_this.state.criticalLevelsChecked[legendKeys[i]] && criticalState.toString() === legendKeys[i]) _this.state.markers.push(marker);\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addMarkers\", function () {\n      for (var section in myData) {\n        if (!myData[section].koordinate.includes(null)) {\n          var coord = myData[section].koordinate.toString().split(',');\n          marker = {\n            coords: [coord[0], coord[1]],\n            locText: myData[section].kraj[0][3].toString(),\n            iconColor: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png'\n          };\n\n          if (_this.state.selectedOption === 'all') {\n            if (Object.keys(_this.state.filterOptions).length === 0) _this.state.markers.push(marker);else _this.setMarkersBasedOnLegend(_this.isSectionCritical(section, _this.state.surface), marker);\n          } else {\n            var criticalState = _this.isSectionCritical(section, _this.state.selectedOption);\n\n            _this.setMarkersBasedOnLegend(criticalState, marker);\n          }\n        }\n      }\n    });\n\n    _this.state = {\n      lat: 46.1491664,\n      lng: 14.9860106,\n      zoom: 9,\n      selectedOption: \"current\",\n      criticalLevelsChecked: {\n        '4': false,\n        '3': false,\n        '2': false\n      },\n      filterOptions: {},\n      markers: [],\n      surface: '',\n      weatherD: '',\n      currentLoc: {\n        lat: 46.1491664,\n        lng: 14.9860106\n      }\n    };\n    return _this;\n  }\n\n  _createClass(StreetMap, [{\n    key: \"changeOption\",\n    value: function changeOption(newOption) {\n      this.setState({\n        markers: []\n      });\n      this.setState({\n        filterOptions: {}\n      });\n      this.setState({\n        selectedOption: newOption.value\n      });\n    }\n  }, {\n    key: \"changeCriticalLevel\",\n    value: function changeCriticalLevel(newLevel) {\n      this.state.markers = [];\n      this.setState({\n        criticalLevelsChecked: newLevel\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getWeatherData(this.state.currentLoc.lat, this.state.currentLoc.lng);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.getLocation();\n      this.addMarkers();\n      var position = [this.state.lat, this.state.lng];\n      return __jsx(Map, {\n        className: \"map\",\n        center: position,\n        zoom: this.state.zoom\n      }, __jsx(TileLayer, {\n        attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }), this.state.markers.map(function (m, idx) {\n        return __jsx(Marker, {\n          key: \"marker-\".concat(idx),\n          position: m.coords,\n          icon: L.icon({\n            iconUrl: m.iconColor,\n            iconSize: [30, 50],\n            iconAnchor: [22, 50],\n            shadowAnchor: [4, 62],\n            // the same for the shadow\n            popupAnchor: [-6, -35]\n          })\n        }, __jsx(Popup, null, __jsx(\"span\", null, m.locText)));\n      }));\n    }\n  }]);\n\n  return StreetMap;\n}(React.Component);\n\nexport default StreetMap;","map":{"version":3,"sources":["/Users/pinagornik/Documents/faks/praktikumSSV/client/react-SSR-app/pages/components/Map.js"],"names":["React","L","myData","request","Map","TileLayer","Marker","Popup","weather","Clear","Rain","Clouds","Snow","Fog","marker","coords","locText","iconColor","criticalState","StreetMap","props","filter","surface","state","markers","setState","filterOptions","navigator","geolocation","position","getCurrentPosition","geoSuccess","alert","lat","latitude","lng","longitude","currentLoc","long","lon","fetch","then","res","json","weatherD","list","main","date","Date","day","getDay","month","getMonth","general","type","current","PRVR_Vreme","Cas_Nesrece","getHours","toString","dan_v_tednu","mesec","PRPV_Povrsje","section","surfaceType","Object","keys","length","getCurrentState","count","includes","parseInt","section_attributes","attribute","url","isLegendEmpty","values","criticalLevelsChecked","legendKeys","setMarkerColor","push","i","koordinate","coord","split","kraj","selectedOption","setMarkersBasedOnLegend","isSectionCritical","zoom","newOption","value","newLevel","getWeatherData","getLocation","addMarkers","map","m","idx","icon","iconUrl","iconSize","iconAnchor","shadowAnchor","popupAnchor","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport L from 'leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport myData from '../../src/data/results_json'\nimport request from 'request'\nimport \"leaflet.awesome-markers/dist/leaflet.awesome-markers.css\"\nimport \"leaflet.awesome-markers/dist/leaflet.awesome-markers\"\n\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\n\nlet weather = {\n    Clear: 'J',\n    Rain: 'D',\n    Clouds: 'O',\n    Snow: 'S',\n    Fog: 'M'\n};\n\nvar marker = {\n    coords: [46.1491664,14.9860106],\n    locText: \"test\",\n    iconColor: \"\",\n    criticalState :0\n};\nclass StreetMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lat: 46.1491664 ,\n            lng: 14.9860106,\n            zoom: 9,\n            selectedOption:\"current\",\n            criticalLevelsChecked: {'4': false, '3': false, '2': false},\n            filterOptions: {},\n            markers: [],\n            surface: '',\n            weatherD: '',\n            currentLoc: {lat: 46.1491664, lng: 14.9860106}\n        }\n    }\n    changeOption(newOption){\n        this.setState({markers: []})\n        this.setState({filterOptions: {}})\n        this.setState({ selectedOption: newOption.value })\n\n    }\n    changeCriticalLevel(newLevel){\n        this.state.markers = [];\n        this.setState({ criticalLevelsChecked: newLevel })\n\n    }\n    changeFilterOptions=(filter,surface)=>{\n        this.state.markers = []\n        this.setState({filterOptions: filter})\n        this.state.surface = surface\n    }\n\n     componentDidMount() {\n        this.getWeatherData(this.state.currentLoc.lat, this.state.currentLoc.lng);\n    }\n    getLocation = () => {\n        if (navigator.geolocation) {\n           let position = navigator.geolocation.getCurrentPosition(this.geoSuccess);\n\n        } else {\n           alert(\"Not supported\")\n        }\n    }\n    geoSuccess =(position) => {\n        var lat = position.coords.latitude;\n        var lng = position.coords.longitude;\n        this.setState({currentLoc: {lat: lat, long: lng}});\n    }\n\n    getWeatherData = (lat,lon) => {\n        fetch('http://api.openweathermap.org/data/2.5/find?lat='+lat+'&lon='+lon+'&cnt=1&APPID=19117506641d90371c01ce010e35f032')\n            .then(res => res.json())\n            .then(json => this.setState({ weatherD: json.list[0].weather[0].main }));\n       /* let url = 'http://api.openweathermap.org/data/2.5/find?lat='+lat+'&lon='+lon+'&cnt=1&APPID=19117506641d90371c01ce010e35f032';\n        request({url,json:true},(error,{body})=>{\n            let d = body.list[0].weather[0].main;\n            this.setState({weatherD: d})\n        }) */\n    };\n    getCurrentState = ()=>{\n        let date = new Date();\n        let day = date.getDay()!==0 ? date.getDay()+1 : 6;\n        let month = date.getMonth()!==12 ? date.getMonth()+1: 0;\n\n        //assign surface at current time\n        let surface = \"\"\n        switch (weather[this.state.weatherD]) {\n            case \"D\": surface = {general: 'ne_suho', type: \"MO\"};  break;\n            case \"S\": surface = {general: 'ne_suho', type: \"SL\"}; break;\n            default: surface = {general: 'suho', type : \"SU\"}; break;\n        }\n        let current = {\n            PRVR_Vreme: weather[this.state.weatherD],\n            Cas_Nesrece: date.getHours().toString()+'.0',\n            dan_v_tednu: day.toString(),\n            mesec: month.toString(),\n            PRPV_Povrsje: surface\n        };\n\n\n        return current\n    };\n    isSectionCritical = (section,surfaceType)=>{\n        let state = Object.keys(this.state.filterOptions).length !== 0 ? this.state.filterOptions : this.getCurrentState()\n        let count = 0;\n        if(myData[section][\"dan_teden\"].includes(parseInt(state['dan_v_tednu']))) {\n            count++;\n        }\n        let section_attributes = myData[section]['povrsje'][state['PRPV_Povrsje']['general']];\n        for(let attribute in state){\n            if(attribute === 'PRPV_Povrsje'){\n                if(section_attributes[attribute].includes(state[attribute]['type'])&& attribute!=='dan_v_tednu')\n                    count++;\n            }\n            else {\n                if(section_attributes[attribute].includes(state[attribute])&& attribute!=='dan_v_tednu')\n                    count++;\n            }\n\n        }\n        return count\n\n    };\n    setMarkerColor = (criticalState)=> {\n        let url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png';\n            switch (criticalState) {\n            case 5: url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'\n            case 4: url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png';     break;\n            case 3: url= 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png';   break;\n            case 2: url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png';   break;\n            case 1: url = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png';   break;\n            }\n        return url;\n    };\n    setMarkersBasedOnLegend= (criticalState,marker) => {\n        let isLegendEmpty = (!Object.values(this.state.criticalLevelsChecked).includes(true))\n        let legendKeys = Object.keys(this.state.criticalLevelsChecked);\n        marker.iconColor = this.setMarkerColor(criticalState);\n        if(criticalState>=1) {\n            if (isLegendEmpty)\n                this.state.markers.push(marker)\n            else {\n                for (let i = 0; i < legendKeys.length; i++) {\n                    if (this.state.criticalLevelsChecked[legendKeys[i]] && (criticalState.toString() === legendKeys[i]))\n                        this.state.markers.push(marker)\n                }\n            }\n        }\n    };\n    addMarkers = () => {\n        for(let section in myData) {\n            if (!myData[section].koordinate.includes(null)) {\n                let coord = myData[section].koordinate.toString().split(',');\n                marker = {coords: [coord[0], coord[1]],locText: myData[section].kraj[0][3].toString(),iconColor: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png' };\n                if (this.state.selectedOption === 'all') {\n                    if(Object.keys(this.state.filterOptions).length === 0)\n                        this.state.markers.push(marker)\n                    else this.setMarkersBasedOnLegend(this.isSectionCritical(section, this.state.surface),marker)\n                }\n                else {\n                    let criticalState = this.isSectionCritical(section, this.state.selectedOption);\n                    this.setMarkersBasedOnLegend(criticalState,marker)\n                }\n            }\n        }\n    };\n    render() {\n        this.getLocation();\n\n        this.addMarkers();\n\n        const position = [this.state.lat, this.state.lng];\n        return (\n            <Map className=\"map\" center={position} zoom={this.state.zoom}>\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n\n                {this.state.markers.map((m, idx) =>\n                    <Marker\n                        key={`marker-${idx}`}\n                        position={m.coords}\n                        icon={L.icon({\n                            iconUrl: m.iconColor,\n                            iconSize: [30, 50],\n                            iconAnchor:   [22, 50],\n                            shadowAnchor: [4, 62],  // the same for the shadow\n                            popupAnchor:  [-6, -35],\n                        })}>\n                    <Popup>\n                        <span>{m.locText}</span>\n                    </Popup>\n                </Marker>\n                )}\n            </Map>\n        );\n    }\n}\nexport default StreetMap"]},"metadata":{},"sourceType":"module"}