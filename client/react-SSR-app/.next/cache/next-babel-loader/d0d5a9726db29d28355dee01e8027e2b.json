{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport axios from 'axios';\nvar data = [];\n\nvar serverLocation = require(\"../../../../src/config/keys\").server;\n\nvar Test = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Test, _PureComponent);\n\n  var _super = _createSuper(Test);\n\n  function Test() {\n    var _this;\n\n    _classCallCheck(this, Test);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      dataLeto: []\n    });\n\n    return _this;\n  }\n\n  _createClass(Test, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get(\"\".concat(serverLocation, \"/api/graph/31\")).then(function (res) {\n        _this2.setState({\n          dataLeto: res.data\n        });\n\n        for (var key in _this2.state) {\n          data.push(_this2.state[key]);\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(AreaChart, {\n        width: 500,\n        height: 300,\n        data: this.state.dataLeto.podatki,\n        margin: {\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0\n        }\n      }, __jsx(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }), __jsx(XAxis, {\n        dataKey: \"promet\",\n        \"text-transform\": \"uppercase\"\n      }), __jsx(YAxis, {\n        domain: [0, 70000]\n      }), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Area, {\n        type: \"monotone\",\n        dataKey: \"nesrece\",\n        stroke: \"#66b2b2\",\n        fill: \"#66b2b2\",\n        dot: {\n          fill: '#008080',\n          strokeWidth: 1\n        }\n      }));\n    }\n  }]);\n\n  return Test;\n}(PureComponent);\n\nexport { Test as default };","map":{"version":3,"sources":["/Users/pinagornik/Documents/faks/praktikumSSV/client/react-SSR-app/pages/components/graphs/NesreceStanjePrometa.js"],"names":["React","PureComponent","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","Legend","axios","data","serverLocation","require","server","Test","dataLeto","get","then","res","setState","key","state","push","podatki","top","right","left","bottom","fill","strokeWidth"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SACIC,SADJ,EACeC,IADf,EACqBC,KADrB,EAC4BC,KAD5B,EACmCC,aADnC,EACkDC,OADlD,EAC2DC,MAD3D,QAEO,UAFP;AAIA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,IAAIC,IAAI,GAAG,EAAX;;AAGA,IAAMC,cAAc,GAAGC,OAAO,CAAC,6BAAD,CAAP,CAAuCC,MAA9D;;IAEqBC,I;;;;;;;;;;;;;;;;4DAET;AACJC,MAAAA,QAAQ,EAAE;AADN,K;;;;;;;wCAIY;AAAA;;AAChBN,MAAAA,KAAK,CAACO,GAAN,WAAaL,cAAb,oBAA4CM,IAA5C,CAAiD,UAAAC,GAAG,EAAI;AACpD,QAAA,MAAI,CAACC,QAAL,CAAc;AAACJ,UAAAA,QAAQ,EAAEG,GAAG,CAACR;AAAf,SAAd;;AACA,aAAI,IAAIU,GAAR,IAAe,MAAI,CAACC,KAApB,EAA2B;AACvBX,UAAAA,IAAI,CAACY,IAAL,CAAU,MAAI,CAACD,KAAL,CAAWD,GAAX,CAAV;AACH;AACJ,OALD;AAMH;;;6BAEQ;AACL,aACI,MAAC,SAAD;AACI,QAAA,KAAK,EAAE,GADX;AAEI,QAAA,MAAM,EAAE,GAFZ;AAGI,QAAA,IAAI,EAAE,KAAKC,KAAL,CAAWN,QAAX,CAAoBQ,OAH9B;AAII,QAAA,MAAM,EAAE;AACJC,UAAAA,GAAG,EAAE,EADD;AACKC,UAAAA,KAAK,EAAE,EADZ;AACgBC,UAAAA,IAAI,EAAE,CADtB;AACyBC,UAAAA,MAAM,EAAE;AADjC;AAJZ,SAQI,MAAC,aAAD;AAAe,QAAA,eAAe,EAAC;AAA/B,QARJ,EASI,MAAC,KAAD;AAAO,QAAA,OAAO,EAAC,QAAf;AAAwB,0BAAe;AAAvC,QATJ,EAUI,MAAC,KAAD;AAAO,QAAA,MAAM,EAAE,CAAC,CAAD,EAAI,KAAJ;AAAf,QAVJ,EAWI,MAAC,OAAD,OAXJ,EAYI,MAAC,MAAD,OAZJ,EAaI,MAAC,IAAD;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC,SAA9B;AAAwC,QAAA,MAAM,EAAC,SAA/C;AAAyD,QAAA,IAAI,EAAC,SAA9D;AAAwE,QAAA,GAAG,EAAE;AAAEC,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,WAAW,EAAE;AAAhC;AAA7E,QAbJ,CADJ;AAiBH;;;;EAjC6B5B,a;;SAAba,I","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n    AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend\n} from 'recharts';\n\nimport axios from 'axios';\n\n\nvar data = [\n];\n\nconst serverLocation = require(\"../../../../src/config/keys\").server;\n\nexport default class Test extends PureComponent {\n\n    state = {\n        dataLeto: [],\n    }\n\n    componentDidMount() {\n        axios.get(`${serverLocation}/api/graph/31`).then(res => {\n            this.setState({dataLeto: res.data});\n            for(var key in this.state) {\n                data.push(this.state[key]);\n            }\n        });\n    }\n\n    render() {\n        return (\n            <AreaChart\n                width={500}\n                height={300}\n                data={this.state.dataLeto.podatki}\n                margin={{\n                    top: 10, right: 30, left: 0, bottom: 0,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"promet\" text-transform=\"uppercase\" />\n                <YAxis domain={[0, 70000]}/>\n                <Tooltip />\n                <Legend/>\n                <Area type=\"monotone\" dataKey=\"nesrece\" stroke=\"#66b2b2\" fill=\"#66b2b2\" dot={{ fill: '#008080', strokeWidth: 1 }} />\n            </AreaChart>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}