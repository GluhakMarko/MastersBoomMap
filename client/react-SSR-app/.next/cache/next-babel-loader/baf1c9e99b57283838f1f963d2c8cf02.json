{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label } from 'recharts';\nimport axios from 'axios';\nvar data = [];\n\nconst serverLocation = require(\"../../../../src/config/keys\").server;\n\nexport default class TipTrcenja extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      datac: []\n    });\n  }\n\n  componentDidMount() {\n    axios.get(`${serverLocation}/api/graph/37`).then(res => {\n      this.setState({\n        datac: res.data\n      });\n\n      for (var key in this.state) {\n        data.push(this.state[key]);\n      }\n    });\n  }\n\n  render() {\n    return __jsx(BarChart, {\n      width: 1200,\n      height: 300,\n      data: this.state.datac.podatki,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, __jsx(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }), __jsx(XAxis, {\n      dataKey: \"intenzivnost\",\n      interval: 0,\n      fontSize: 7\n    }), __jsx(YAxis, null), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Bar, {\n      dataKey: \"nesrece\",\n      fill: \"#398564\",\n      label: {\n        fill: 'white',\n        fontSize: 12\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/pinagornik/Documents/faks/praktikumSSV/client/react-SSR-app/pages/components/graphs/TipTrcenja.js"],"names":["React","PureComponent","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Label","axios","data","serverLocation","require","server","TipTrcenja","datac","componentDidMount","get","then","res","setState","key","state","push","render","podatki","top","right","left","bottom","fill","fontSize"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SACIC,QADJ,EACcC,GADd,EACmBC,IADnB,EACyBC,KADzB,EACgCC,KADhC,EACuCC,aADvC,EACsDC,OADtD,EAC+DC,MAD/D,EACuEC,KADvE,QAEO,UAFP;AAIA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAIC,IAAI,GAAG,EAAX;;AAGA,MAAMC,cAAc,GAAGC,OAAO,CAAC,6BAAD,CAAP,CAAuCC,MAA9D;;AAEA,eAAe,MAAMC,UAAN,SAAyBf,aAAzB,CAAuC;AAAA;AAAA;;AAAA,mCAE1C;AACJgB,MAAAA,KAAK,EAAE;AADH,KAF0C;AAAA;;AAMlDC,EAAAA,iBAAiB,GAAG;AAChBP,IAAAA,KAAK,CAACQ,GAAN,CAAW,GAAEN,cAAe,eAA5B,EAA4CO,IAA5C,CAAiDC,GAAG,IAAI;AACpD,WAAKC,QAAL,CAAc;AAACL,QAAAA,KAAK,EAAEI,GAAG,CAACT;AAAZ,OAAd;;AACA,WAAI,IAAIW,GAAR,IAAe,KAAKC,KAApB,EAA2B;AACvBZ,QAAAA,IAAI,CAACa,IAAL,CAAU,KAAKD,KAAL,CAAWD,GAAX,CAAV;AACH;AACJ,KALD;AAMH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,QAAD;AACI,MAAA,KAAK,EAAE,IADX;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWP,KAAX,CAAiBU,OAH3B;AAII,MAAA,MAAM,EAAE;AACJC,QAAAA,GAAG,EAAE,CADD;AACIC,QAAAA,KAAK,EAAE,EADX;AACeC,QAAAA,IAAI,EAAE,EADrB;AACyBC,QAAAA,MAAM,EAAE;AADjC;AAJZ,OAQI,MAAC,aAAD;AAAe,MAAA,eAAe,EAAC;AAA/B,MARJ,EASI,MAAC,KAAD;AAAO,MAAA,OAAO,EAAC,cAAf;AAA8B,MAAA,QAAQ,EAAE,CAAxC;AAA2C,MAAA,QAAQ,EAAE;AAArD,MATJ,EAUI,MAAC,KAAD,OAVJ,EAWI,MAAC,OAAD,OAXJ,EAYI,MAAC,MAAD,OAZJ,EAaI,MAAC,GAAD;AAAK,MAAA,OAAO,EAAC,SAAb;AAAuB,MAAA,IAAI,EAAC,SAA5B;AAAsC,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,QAAQ,EAAE;AAA3B;AAA7C,MAbJ,CADJ;AAiBH;;AAjCiD","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n    BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label\n} from 'recharts';\n\nimport axios from 'axios';\n\nvar data = [\n];\n\nconst serverLocation = require(\"../../../../src/config/keys\").server;\n\nexport default class TipTrcenja extends PureComponent {\n\n    state = {\n        datac: [],\n    }\n\n    componentDidMount() {\n        axios.get(`${serverLocation}/api/graph/37`).then(res => {\n            this.setState({datac: res.data});\n            for(var key in this.state) {\n                data.push(this.state[key]);\n            }\n        });\n    }\n\n    render() {\n        return (\n            <BarChart\n                width={1200}\n                height={300}\n                data={this.state.datac.podatki}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"intenzivnost\" interval={0} fontSize={7}/>\n                <YAxis/>\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"nesrece\" fill=\"#398564\" label={{ fill: 'white', fontSize: 12 }}/>\n            </BarChart>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}