{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from \"react\";\nimport axios from \"axios\";\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\n\nconst serverLocation = require(\"../../../../src/config/keys\").server;\n\nvar data = [];\nexport default class NesreceDnevi extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      datag: []\n    });\n  }\n\n  componentDidMount() {\n    axios.get(`${serverLocation}/api/graph/24`).then(res => {\n      this.setState({\n        datag: res.data\n      });\n\n      for (var key in this.state) {\n        data.push(this.state[key]);\n      }\n    });\n  }\n\n  render() {\n    return __jsx(BarChart, {\n      width: 1200,\n      height: 300,\n      data: this.state.datag.podatki,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, __jsx(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }), __jsx(XAxis, {\n      dataKey: \"dan\",\n      interval: 0,\n      fontSize: 12\n    }), __jsx(YAxis, {\n      domain: [0, 25000]\n    }), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Bar, {\n      layout: \"horizontal\",\n      dataKey: \"nesrece\",\n      fill: \"#008080\",\n      fillOpacity: \"0.7\",\n      label: {\n        fill: \"white\",\n        fontSize: 10\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/pinagornik/Documents/faks/praktikumSSV/client/react-SSR-app/pages/components/graphs/NesreceDnevi.js"],"names":["React","PureComponent","axios","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","serverLocation","require","server","data","NesreceDnevi","datag","componentDidMount","get","then","res","setState","key","state","push","render","podatki","top","right","left","bottom","fill","fontSize"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,aANF,EAOEC,OAPF,EAQEC,MARF,QASO,UATP;;AAUA,MAAMC,cAAc,GAAGC,OAAO,CAAC,6BAAD,CAAP,CAAuCC,MAA9D;;AAEA,IAAIC,IAAI,GAAG,EAAX;AAEA,eAAe,MAAMC,YAAN,SAA2Bd,aAA3B,CAAyC;AAAA;AAAA;;AAAA,mCAC9C;AACNe,MAAAA,KAAK,EAAE;AADD,KAD8C;AAAA;;AAKtDC,EAAAA,iBAAiB,GAAG;AAClBf,IAAAA,KAAK,CAACgB,GAAN,CAAW,GAAEP,cAAe,eAA5B,EAA4CQ,IAA5C,CAAiDC,GAAG,IAAI;AACtD,WAAKC,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAEI,GAAG,CAACN;AAAb,OAAd;;AACA,WAAK,IAAIQ,GAAT,IAAgB,KAAKC,KAArB,EAA4B;AAC1BT,QAAAA,IAAI,CAACU,IAAL,CAAU,KAAKD,KAAL,CAAWD,GAAX,CAAV;AACD;AACF,KALD;AAMD;;AAEDG,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,QAAD;AACE,MAAA,KAAK,EAAE,IADT;AAEE,MAAA,MAAM,EAAE,GAFV;AAGE,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWP,KAAX,CAAiBU,OAHzB;AAIE,MAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAE,CADC;AAENC,QAAAA,KAAK,EAAE,EAFD;AAGNC,QAAAA,IAAI,EAAE,EAHA;AAINC,QAAAA,MAAM,EAAE;AAJF;AAJV,OAWE,MAAC,aAAD;AAAe,MAAA,eAAe,EAAC;AAA/B,MAXF,EAYE,MAAC,KAAD;AAAO,MAAA,OAAO,EAAC,KAAf;AAAqB,MAAA,QAAQ,EAAE,CAA/B;AAAkC,MAAA,QAAQ,EAAE;AAA5C,MAZF,EAaE,MAAC,KAAD;AAAO,MAAA,MAAM,EAAE,CAAC,CAAD,EAAI,KAAJ;AAAf,MAbF,EAcE,MAAC,OAAD,OAdF,EAeE,MAAC,MAAD,OAfF,EAgBE,MAAC,GAAD;AACE,MAAA,MAAM,EAAC,YADT;AAEE,MAAA,OAAO,EAAC,SAFV;AAGE,MAAA,IAAI,EAAC,SAHP;AAIE,MAAA,WAAW,EAAC,KAJd;AAKE,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,QAAQ,EAAE;AAA3B;AALT,MAhBF,CADF;AA0BD;;AAzCqD","sourcesContent":["import React, { PureComponent } from \"react\";\nimport axios from \"axios\";\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\nconst serverLocation = require(\"../../../../src/config/keys\").server;\n\nvar data = [];\n\nexport default class NesreceDnevi extends PureComponent {\n  state = {\n    datag: []\n  };\n\n  componentDidMount() {\n    axios.get(`${serverLocation}/api/graph/24`).then(res => {\n      this.setState({ datag: res.data });\n      for (var key in this.state) {\n        data.push(this.state[key]);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <BarChart\n        width={1200}\n        height={300}\n        data={this.state.datag.podatki}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"dan\" interval={0} fontSize={12} />\n        <YAxis domain={[0, 25000]} />\n        <Tooltip />\n        <Legend />\n        <Bar\n          layout=\"horizontal\"\n          dataKey=\"nesrece\"\n          fill=\"#008080\"\n          fillOpacity=\"0.7\"\n          label={{ fill: \"white\", fontSize: 10 }}\n        />\n      </BarChart>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}