{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport axios from 'axios';\nvar data = [];\n\nconst serverLocation = require(\"../../config/keys.js\").server;\n\nexport default class Test extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataLeto: []\n    });\n  }\n\n  componentDidMount() {\n    axios.get(`${serverLocation}/api/graph/31`).then(res => {\n      this.setState({\n        dataLeto: res.data\n      });\n\n      for (var key in this.state) {\n        data.push(this.state[key]);\n      }\n    });\n  }\n\n  render() {\n    return __jsx(AreaChart, {\n      width: 500,\n      height: 300,\n      data: this.state.dataLeto.podatki,\n      margin: {\n        top: 10,\n        right: 30,\n        left: 0,\n        bottom: 0\n      }\n    }, __jsx(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }), __jsx(XAxis, {\n      dataKey: \"promet\",\n      \"text-transform\": \"uppercase\"\n    }), __jsx(YAxis, {\n      domain: [0, 70000]\n    }), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Area, {\n      type: \"monotone\",\n      dataKey: \"nesrece\",\n      stroke: \"#66b2b2\",\n      fill: \"#66b2b2\",\n      dot: {\n        fill: '#008080',\n        strokeWidth: 1\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/pinagornik/Documents/faks/praktikumSSV/client/react-SSR-app/pages/components/graphs/NesreceStanjePrometa.js"],"names":["React","PureComponent","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","Legend","axios","data","serverLocation","require","server","Test","dataLeto","componentDidMount","get","then","res","setState","key","state","push","render","podatki","top","right","left","bottom","fill","strokeWidth"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SACIC,SADJ,EACeC,IADf,EACqBC,KADrB,EAC4BC,KAD5B,EACmCC,aADnC,EACkDC,OADlD,EAC2DC,MAD3D,QAEO,UAFP;AAIA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,IAAIC,IAAI,GAAG,EAAX;;AAGA,MAAMC,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCC,MAAvD;;AAEA,eAAe,MAAMC,IAAN,SAAmBb,aAAnB,CAAiC;AAAA;AAAA;;AAAA,mCAEpC;AACJc,MAAAA,QAAQ,EAAE;AADN,KAFoC;AAAA;;AAM5CC,EAAAA,iBAAiB,GAAG;AAChBP,IAAAA,KAAK,CAACQ,GAAN,CAAW,GAAEN,cAAe,eAA5B,EAA4CO,IAA5C,CAAiDC,GAAG,IAAI;AACpD,WAAKC,QAAL,CAAc;AAACL,QAAAA,QAAQ,EAAEI,GAAG,CAACT;AAAf,OAAd;;AACA,WAAI,IAAIW,GAAR,IAAe,KAAKC,KAApB,EAA2B;AACvBZ,QAAAA,IAAI,CAACa,IAAL,CAAU,KAAKD,KAAL,CAAWD,GAAX,CAAV;AACH;AACJ,KALD;AAMH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,SAAD;AACI,MAAA,KAAK,EAAE,GADX;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWP,QAAX,CAAoBU,OAH9B;AAII,MAAA,MAAM,EAAE;AACJC,QAAAA,GAAG,EAAE,EADD;AACKC,QAAAA,KAAK,EAAE,EADZ;AACgBC,QAAAA,IAAI,EAAE,CADtB;AACyBC,QAAAA,MAAM,EAAE;AADjC;AAJZ,OAQI,MAAC,aAAD;AAAe,MAAA,eAAe,EAAC;AAA/B,MARJ,EASI,MAAC,KAAD;AAAO,MAAA,OAAO,EAAC,QAAf;AAAwB,wBAAe;AAAvC,MATJ,EAUI,MAAC,KAAD;AAAO,MAAA,MAAM,EAAE,CAAC,CAAD,EAAI,KAAJ;AAAf,MAVJ,EAWI,MAAC,OAAD,OAXJ,EAYI,MAAC,MAAD,OAZJ,EAaI,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,SAA9B;AAAwC,MAAA,MAAM,EAAC,SAA/C;AAAyD,MAAA,IAAI,EAAC,SAA9D;AAAwE,MAAA,GAAG,EAAE;AAAEC,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,WAAW,EAAE;AAAhC;AAA7E,MAbJ,CADJ;AAiBH;;AAjC2C","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n    AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend\n} from 'recharts';\n\nimport axios from 'axios';\n\n\nvar data = [\n];\n\nconst serverLocation = require(\"../../config/keys.js\").server;\n\nexport default class Test extends PureComponent {\n\n    state = {\n        dataLeto: [],\n    }\n\n    componentDidMount() {\n        axios.get(`${serverLocation}/api/graph/31`).then(res => {\n            this.setState({dataLeto: res.data});\n            for(var key in this.state) {\n                data.push(this.state[key]);\n            }\n        });\n    }\n\n    render() {\n        return (\n            <AreaChart\n                width={500}\n                height={300}\n                data={this.state.dataLeto.podatki}\n                margin={{\n                    top: 10, right: 30, left: 0, bottom: 0,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"promet\" text-transform=\"uppercase\" />\n                <YAxis domain={[0, 70000]}/>\n                <Tooltip />\n                <Legend/>\n                <Area type=\"monotone\" dataKey=\"nesrece\" stroke=\"#66b2b2\" fill=\"#66b2b2\" dot={{ fill: '#008080', strokeWidth: 1 }} />\n            </AreaChart>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}