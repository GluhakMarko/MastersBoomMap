{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from \"react\";\nimport axios from \"axios\";\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\n\nvar serverLocation = require(\"../../config/keys.js\").server;\n\nvar data = [];\n\nvar NesreceDnevi = /*#__PURE__*/function (_PureComponent) {\n  _inherits(NesreceDnevi, _PureComponent);\n\n  var _super = _createSuper(NesreceDnevi);\n\n  function NesreceDnevi() {\n    var _this;\n\n    _classCallCheck(this, NesreceDnevi);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      datag: []\n    });\n\n    return _this;\n  }\n\n  _createClass(NesreceDnevi, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get(\"\".concat(serverLocation, \"/api/graph/24\")).then(function (res) {\n        _this2.setState({\n          datag: res.data\n        });\n\n        for (var key in _this2.state) {\n          data.push(_this2.state[key]);\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(BarChart, {\n        width: 1200,\n        height: 300,\n        data: this.state.datag.podatki,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }\n      }, __jsx(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }), __jsx(XAxis, {\n        dataKey: \"dan\",\n        interval: 0,\n        fontSize: 12\n      }), __jsx(YAxis, {\n        domain: [0, 25000]\n      }), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Bar, {\n        layout: \"horizontal\",\n        dataKey: \"nesrece\",\n        fill: \"#008080\",\n        fillOpacity: \"0.7\",\n        label: {\n          fill: \"white\",\n          fontSize: 10\n        }\n      }));\n    }\n  }]);\n\n  return NesreceDnevi;\n}(PureComponent);\n\nexport { NesreceDnevi as default };","map":{"version":3,"sources":["/Users/pinagornik/Documents/faks/praktikumSSV/client/react-SSR-app/pages/components/graphs/NesreceDnevi.js"],"names":["React","PureComponent","axios","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","serverLocation","require","server","data","NesreceDnevi","datag","get","then","res","setState","key","state","push","podatki","top","right","left","bottom","fill","fontSize"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,aANF,EAOEC,OAPF,EAQEC,MARF,QASO,UATP;;AAUA,IAAMC,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCC,MAAvD;;AAEA,IAAIC,IAAI,GAAG,EAAX;;IAEqBC,Y;;;;;;;;;;;;;;;;4DACX;AACNC,MAAAA,KAAK,EAAE;AADD,K;;;;;;;wCAIY;AAAA;;AAClBd,MAAAA,KAAK,CAACe,GAAN,WAAaN,cAAb,oBAA4CO,IAA5C,CAAiD,UAAAC,GAAG,EAAI;AACtD,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEJ,UAAAA,KAAK,EAAEG,GAAG,CAACL;AAAb,SAAd;;AACA,aAAK,IAAIO,GAAT,IAAgB,MAAI,CAACC,KAArB,EAA4B;AAC1BR,UAAAA,IAAI,CAACS,IAAL,CAAU,MAAI,CAACD,KAAL,CAAWD,GAAX,CAAV;AACD;AACF,OALD;AAMD;;;6BAEQ;AACP,aACE,MAAC,QAAD;AACE,QAAA,KAAK,EAAE,IADT;AAEE,QAAA,MAAM,EAAE,GAFV;AAGE,QAAA,IAAI,EAAE,KAAKC,KAAL,CAAWN,KAAX,CAAiBQ,OAHzB;AAIE,QAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAE,CADC;AAENC,UAAAA,KAAK,EAAE,EAFD;AAGNC,UAAAA,IAAI,EAAE,EAHA;AAINC,UAAAA,MAAM,EAAE;AAJF;AAJV,SAWE,MAAC,aAAD;AAAe,QAAA,eAAe,EAAC;AAA/B,QAXF,EAYE,MAAC,KAAD;AAAO,QAAA,OAAO,EAAC,KAAf;AAAqB,QAAA,QAAQ,EAAE,CAA/B;AAAkC,QAAA,QAAQ,EAAE;AAA5C,QAZF,EAaE,MAAC,KAAD;AAAO,QAAA,MAAM,EAAE,CAAC,CAAD,EAAI,KAAJ;AAAf,QAbF,EAcE,MAAC,OAAD,OAdF,EAeE,MAAC,MAAD,OAfF,EAgBE,MAAC,GAAD;AACE,QAAA,MAAM,EAAC,YADT;AAEE,QAAA,OAAO,EAAC,SAFV;AAGE,QAAA,IAAI,EAAC,SAHP;AAIE,QAAA,WAAW,EAAC,KAJd;AAKE,QAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,OAAR;AAAiBC,UAAAA,QAAQ,EAAE;AAA3B;AALT,QAhBF,CADF;AA0BD;;;;EAzCuC7B,a;;SAArBc,Y","sourcesContent":["import React, { PureComponent } from \"react\";\nimport axios from \"axios\";\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\nconst serverLocation = require(\"../../config/keys.js\").server;\n\nvar data = [];\n\nexport default class NesreceDnevi extends PureComponent {\n  state = {\n    datag: []\n  };\n\n  componentDidMount() {\n    axios.get(`${serverLocation}/api/graph/24`).then(res => {\n      this.setState({ datag: res.data });\n      for (var key in this.state) {\n        data.push(this.state[key]);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <BarChart\n        width={1200}\n        height={300}\n        data={this.state.datag.podatki}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"dan\" interval={0} fontSize={12} />\n        <YAxis domain={[0, 25000]} />\n        <Tooltip />\n        <Legend />\n        <Bar\n          layout=\"horizontal\"\n          dataKey=\"nesrece\"\n          fill=\"#008080\"\n          fillOpacity=\"0.7\"\n          label={{ fill: \"white\", fontSize: 10 }}\n        />\n      </BarChart>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}